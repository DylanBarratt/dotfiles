#!/usr/bin/env bash

test -z "$(git diff --cached --exit-code)" && echo "Exiting, no files staged" && exit 1

echo "Commit type"
TYPE=$(gum choose "bugfix" "feature" "prettier" "docs" "style" "refactor" "test" "chore" "revert")
if [[ "$TYPE" == "bugfix" ]]; then
  TYPE="fix"
elif [[ "$TYPE" == "feature" ]]; then
  TYPE="feat"
elif [[ "$TYPE" == "prettier" ]]; then
  # just use a short prettier message
  git commit -m "prettier"
  exit 1
fi

test -z "$TYPE" && echo "Exiting..." && exit 1

echo "Changes scope (optional):"
# echo "~~ Any optional fields may be left blank ~~"
SCOPE=$(gum input --placeholder "")
test -n "$SCOPE" && SCOPE="($SCOPE)" # wrap SCOPE in parentheses if it has a value.

echo "Summary of the changes:"
SUMMARY=$(gum input --value "$TYPE$SCOPE: ")
test -z "$SUMMARY" && echo "Exiting..." && exit 1

echo "Body of the commit (optional):"
DESCRIPTION=$(gum write --placeholder "")

echo "Jira issue number:"
ISSUE_NUM=$(gum input --value "$(git branch --show-current | grep -oE 'BLP-[0-9]+')")
test -z "$ISSUE_NUM" && echo "Exiting..." && exit 1

gum style \
  --foreground 0 --border-foreground 0 --border thick \
  --align center --width 50 --margin "1 2" --padding "2 4" \
  "$SUMMARY" "$DESCRIPTION" "Jira-Issue: $ISSUE_NUM"

git commit -m "$SUMMARY" -m "$DESCRIPTION" -m "Jira-Issue: $ISSUE_NUM"
